// Code generated by mockery. DO NOT EDIT.

package core_mock

import (
	core "github.com/reshifr/play/core"
	mock "github.com/stretchr/testify/mock"
)

// Env is an autogenerated mock type for the IEnv type
type Env struct {
	mock.Mock
}

type Env_Expecter struct {
	mock *mock.Mock
}

func (_m *Env) EXPECT() *Env_Expecter {
	return &Env_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields:
func (_m *Env) Clear() {
	_m.Called()
}

// Env_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type Env_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *Env_Expecter) Clear() *Env_Clear_Call {
	return &Env_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *Env_Clear_Call) Run(run func()) *Env_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Env_Clear_Call) Return() *Env_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *Env_Clear_Call) RunAndReturn(run func()) *Env_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Command provides a mock function with given fields: path, args
func (_m *Env) Command(path string, args ...string) core.ICmd {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 core.ICmd
	if rf, ok := ret.Get(0).(func(string, ...string) core.ICmd); ok {
		r0 = rf(path, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.ICmd)
		}
	}

	return r0
}

// Env_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type Env_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - path string
//   - args ...string
func (_e *Env_Expecter) Command(path interface{}, args ...interface{}) *Env_Command_Call {
	return &Env_Command_Call{Call: _e.mock.On("Command",
		append([]interface{}{path}, args...)...)}
}

func (_c *Env_Command_Call) Run(run func(path string, args ...string)) *Env_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Env_Command_Call) Return(cmd core.ICmd) *Env_Command_Call {
	_c.Call.Return(cmd)
	return _c
}

func (_c *Env_Command_Call) RunAndReturn(run func(string, ...string) core.ICmd) *Env_Command_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnv creates a new instance of Env. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnv(t interface {
	mock.TestingT
	Cleanup(func())
}) *Env {
	mock := &Env{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
