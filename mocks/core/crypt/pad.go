// Code generated by mockery. DO NOT EDIT.

package crypt_mock

import mock "github.com/stretchr/testify/mock"

// Pad is an autogenerated mock type for the IPad type
type Pad struct {
	mock.Mock
}

type Pad_Expecter struct {
	mock *mock.Mock
}

func (_m *Pad) EXPECT() *Pad_Expecter {
	return &Pad_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: block, aligned
func (_m *Pad) Add(block []byte, aligned uint8) ([]byte, bool) {
	ret := _m.Called(block, aligned)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 []byte
	var r1 bool
	if rf, ok := ret.Get(0).(func([]byte, uint8) ([]byte, bool)); ok {
		return rf(block, aligned)
	}
	if rf, ok := ret.Get(0).(func([]byte, uint8) []byte); ok {
		r0 = rf(block, aligned)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, uint8) bool); ok {
		r1 = rf(block, aligned)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Pad_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Pad_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - block []byte
//   - aligned uint8
func (_e *Pad_Expecter) Add(block interface{}, aligned interface{}) *Pad_Add_Call {
	return &Pad_Add_Call{Call: _e.mock.On("Add", block, aligned)}
}

func (_c *Pad_Add_Call) Run(run func(block []byte, aligned uint8)) *Pad_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint8))
	})
	return _c
}

func (_c *Pad_Add_Call) Return(padded []byte, ok bool) *Pad_Add_Call {
	_c.Call.Return(padded, ok)
	return _c
}

func (_c *Pad_Add_Call) RunAndReturn(run func([]byte, uint8) ([]byte, bool)) *Pad_Add_Call {
	_c.Call.Return(run)
	return _c
}

// NewPad creates a new instance of Pad. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPad(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pad {
	mock := &Pad{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
